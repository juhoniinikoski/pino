// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render tests should display a name of the channel (channelpage) 1`] = `
<RNCSafeAreaView
  edges={
    Array [
      "left",
      "right",
    ]
  }
  style={
    Array [
      Object {
        "display": "flex",
        "flex": 1,
        "marginHorizontal": 16,
      },
      undefined,
    ]
  }
>
  <Text
    style={
      Object {
        "textAlign": "center",
        "textAlignVertical": "center",
      }
    }
  >
    Loading
  </Text>
</RNCSafeAreaView>
`;

exports[`render tests should render a list containing questions succesfully (channelpage) 1`] = `
<RNCSafeAreaView
  edges={
    Array [
      "left",
      "right",
    ]
  }
  style={
    Array [
      Object {
        "display": "flex",
        "flex": 1,
        "marginHorizontal": 16,
      },
      undefined,
    ]
  }
>
  <RCTScrollView
    data={Array []}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    showsHorizontalScrollIndicator={false}
    showsVerticalScrollIndicator={false}
    stickyHeaderIndices={Array []}
    testID="question-list"
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View />
  </RCTScrollView>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#EFEFEF",
        "borderRadius": 100,
        "bottom": 16,
        "display": "flex",
        "height": 64,
        "justifyContent": "center",
        "position": "absolute",
        "right": 0,
        "shadowColor": "black",
        "shadowOffset": Object {
          "height": 4,
          "width": 0,
        },
        "shadowOpacity": 0.08,
        "shadowRadius": 8,
        "width": 64,
      }
    }
    testID="button"
  >
    <Text
      allowFontScaling={false}
      style={
        Array [
          Object {
            "color": "black",
            "fontSize": 28,
          },
          Object {
            "marginLeft": 6,
          },
          Object {
            "fontFamily": "FontAwesome",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
          Object {},
        ]
      }
    >
      ÔÅÑ
    </Text>
  </View>
</RNCSafeAreaView>
`;

exports[`render tests should show loading indicator when questions are loaded (channelpage) 1`] = `
<RNCSafeAreaView
  edges={
    Array [
      "left",
      "right",
    ]
  }
  style={
    Array [
      Object {
        "display": "flex",
        "flex": 1,
        "marginHorizontal": 16,
      },
      undefined,
    ]
  }
>
  <Text
    style={
      Object {
        "textAlign": "center",
        "textAlignVertical": "center",
      }
    }
  >
    Loading
  </Text>
</RNCSafeAreaView>
`;
